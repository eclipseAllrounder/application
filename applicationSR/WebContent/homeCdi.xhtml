<?xml version="1.0" encoding="UTF-8"?>
<ui:composition template="/resources/templates/templateRightToolbox.xhtml"
                xmlns="http://www.w3.org/1999/xhtml"
                xmlns:ui="http://java.sun.com/jsf/facelets"
                xmlns:f="http://java.sun.com/jsf/core"
                xmlns:h="http://java.sun.com/jsf/html"
                xmlns:a4j="http://richfaces.org/a4j"
                xmlns:rich="http://richfaces.org/rich"
                xmlns:my="http://java.sun.com/jsf/composite/components">
    <ui:define name="content">
        
  <h:form id="loginForm3" rendered="#{not identity.loggedIn}"> 
 
	
	   <rich:togglePanel activeItem="item3" id="layout2">
		
		  <rich:togglePanelItem id="item3">
yyyyyyyyyyyyyyyyyyyyyyyyyyyy
<h:commandButton>
<rich:toggleControl targetItem="@last"/> <!--switches to item2 -->
</h:commandButton>
</rich:togglePanelItem>
		
		   		  <rich:togglePanelItem id="item4">
zzzzzzzzzzzzzzzzzzzzzzzzzzzz
<h:commandButton>
<rich:toggleControl targetItem="@first"/> <!--switches to item2 -->
</h:commandButton>
</rich:togglePanelItem>
	
		    </rich:togglePanel>
	 
	  
	  
	  
<rich:togglePanel activeItem="item1" id="layout">
<rich:togglePanelItem id="item1">
1111111111111111111111111
<h:commandButton>
<rich:toggleControl targetItem="@last"/> <!--switches to item2 -->
</h:commandButton>
</rich:togglePanelItem>
<rich:togglePanelItem id="item2">
    <p>
        If basic <b>toolbar setup</b> or <b>look &amp; feel</b> of rich:editor does not suit your needs, there are Editor's
        attributes which can help you.
    </p>

    <p>
        At first, you can configure <b>toolbar attribute</b>, you have two built-in options: <b>'basic'</b> and <b>'full'</b>.
    </p>

    <p>
        But if you would like to configure completely custom setup of toolbar, you can use <b>config attribute</b> and provide
        own customizations. In this example, there is <b>'custom'</b> toolbar option configured. More about <b>advanced
            editor configuration options</b> in next tab.
    </p>

    <hr />

    <p>
        The default skin is called 'moono' (which is bundled with RichFaces), but with the <b>skin attribute</b>, you are able to switch between <b>skins</b>. 
    </p>

    <p>However you can download any other CKEditor skin, place it to predefined location (<tt>/META-INF/resources/org.richfaces.ckeditor/skins/</tt> or <tt>WAR/resources/org.richfaces.ckeditor/skins/</tt>), and then setup <b>skin attribute</b>.
        This way you can use a skin of your choice.</p>
        
    <h:outputStylesheet>
        .rf-p { margin-bottom: 1em }
    </h:outputStylesheet>

        <a4j:ajax render="editor">
            <rich:panel header="Toolbar Configuration">
                <h:selectOneRadio id="toolbarSelection" value="#{editorBean.toolbar}">
                    <f:selectItem itemLabel="Basic" itemValue="basic" />
                    <f:selectItem itemLabel="Full" itemValue="full" />
                    <f:selectItem itemLabel="Custom" itemValue="custom" />                
                </h:selectOneRadio>
            </rich:panel>
            
            <rich:panel header="Editor Skin">
                <h:selectOneRadio id="skinSelection" value="#{editorBean.skin}">
                    <f:selectItem itemLabel="moono" itemValue="moono" />
                </h:selectOneRadio>
            </rich:panel>
        </a4j:ajax>

        <rich:editor id="editor" toolbar="full" value="#{editorBean.value}" style="margin-bottom: 1em;" skin="moonocolor">
        <f:facet name="config">
		contentsCss: ['#{facesContext.externalContext.requestContextPath}/resources/css/editor.css'],
		
		toolbar_custom:
[
{ name: 'document', items : [ 'NewPage','Preview' ] },
{ name: 'clipboard', items : [ 'Cut','Copy','Paste','-','Undo','Redo' ] },
{ name: 'editing', items : [ 'Find','Replace','-','SelectAll','-','Scayt' ] },
{ name: 'insert', items : [ 'Image', 'Flash', 'Table', 'HorizontalRule','Smiley', 'SpecialChar', 'PageBreak', 'Iframe' ] },'/',
{ name: 'styles', items : [ 'Styles','Format' ] },
{ name: 'basicstyles', items : [ 'Bold','Italic','Strike','-','RemoveFormat' ] },
{ name: 'paragraph', items : [ 'NumberedList','BulletedList','-','Outdent','Indent','-','Blockquote' ] },
{ name: 'links', items : [ 'Link','Unlink','Anchor' ] },
{ name: 'tools', items : [ 'Maximize' ] }
]
		</f:facet>
            <a4j:ajax event="change" render="panel" status="panelUpdateStatus" />
            <a4j:ajax event="dirty" render="panel" status="panelUpdateStatus">
                <a4j:attachQueue requestDelay="1000" />
            </a4j:ajax>
        </rich:editor>
        
        <rich:panel id="panel">
            <f:facet name="header">
                Output from Editor
                <a4j:status name="panelUpdateStatus">
                    <f:facet name="start">
                        (Updating)
                    </f:facet>
                </a4j:status>
            </f:facet>
            <h:outputText escape="false" value="#{editorBean.value}" />
        </rich:panel>


  


<h:commandButton>
<rich:toggleControl targetItem="@first"/> <!--switches to item1 -->
</h:commandButton>
</rich:togglePanelItem>
</rich:togglePanel>

</h:form>

  <p>
    This quickstart demonstrates how we can use PicketLink IDM's groups and roles to provide authorization checks within an application.
  </p>
  
  <p>
    The identity management configuration is based on PicketLink's JPAIdentityStore, which uses a database to store the application's
    users, groups and roles, and the relationships between them.
  </p>

<ui:fragment rendered="#{identity.loggedIn}">
    <div>Congratulations! You are currently logged in as: <b>#{loginController.loggedinUserName}</b></div>

<!--  <ui:fragment rendered="#{authorizationChecker.hasApplicationRole('guest')}">
      <div>You have been granted the 'guest' application role.</div>
    </ui:fragment> -->  
    
    <ui:fragment rendered="#{authorizationChecker.isSubGroupMember('company', 'head')}">
      <div>You are a member of the 'head' group.</div>
    </ui:fragment>
    
    
    

    <h:form>
        <h:commandButton id="logout" value="Log out" action="#{identity.logout}"/>
    </h:form>
</ui:fragment>

<h:form id="loginForm2" rendered="#{not identity.loggedIn}">
    <h:messages globalOnly="true"/>

          <h:panelGrid columns="2" styleClass="default">

            <h:outputText value="Enter key:" />
            <h:inputText value="#{property.key}" />

            <h:outputText value="Enter value:" />
            <h:inputText value="#{property.value}" />

            <h:commandButton actionListener="#{manager.save}"
                styleClass="buttons" value="Save key/value" />
      
      		  <h:commandButton actionListener="#{manager.startHumanTaskProcess()}"
                styleClass="buttons" value="Start Process" />
            <h:messages />

        </h:panelGrid>

        <h:dataTable value="#{propertyList}" var="item"
            styleClass="table" headerClass="table-header"
            rowClasses="table-odd-row,table-even-row">
            <h:column>
                <f:facet name="header">Key</f:facet> 
                <h:outputText value="#{item.key}" />
            </h:column>
            <h:column>
                <f:facet name="header">Value</f:facet>
                <h:outputText value="#{item.value}" />
            </h:column>
            <h:column>
                <f:facet name="header">Delete</f:facet>
                <h:commandButton actionListener="#{manager.clear(item)}"
                styleClass="buttons" value="Delete" />
            </h:column>

        </h:dataTable>

	
</h:form>

<br style="clear:both"/>

    </ui:define>
     <ui:define name="rside">hhhalllo khgui guigug oiugiu gigiuguigkjgjhgj hjkhjkghjk hghjg jhg jhgkj hkl jlö klk hjjk hgjk hghjgjh gjh hkj kjh kjh jkg jk hkl jlk löj kiu giuiugoigiugoiugoigiuguigiu ggugoigiuguigg  uiiuhuiguigiuguigiusete</ui:define>
</ui:composition>
