<?xml version="1.0" encoding="UTF-8"?>
<!--
    JBoss, Home of Professional Open Source
    Copyright 2013, Red Hat, Inc. and/or its affiliates, and individual
    contributors by the @authors tag. See the copyright.txt in the
    distribution for a full listing of individual contributors.
 
    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->



 
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>org.jboss.as.kitchensink-rf</groupId>
    <artifactId>kitchensink</artifactId>
    <version>8.0.0-SNAPSHOT</version>
    <packaging>war</packaging>
    <name>WildFly Quickstarts: Kitchensink</name>
    <description>kitchensink-jsp: Kitchensink with JSP front end</description>
    <url>http://wildfly.org</url>
    <licenses>
        <license>
            <name>Apache License, Version 2.0</name>
            <distribution>repo</distribution>
            <url>http://www.apache.org/licenses/LICENSE-2.0.html</url>
        </license>
    </licenses>

    <properties>
        <!-- Explicitly declaring the source encoding eliminates the following 
            message: -->
        <!-- [WARNING] Using platform encoding (UTF-8 actually) to copy filtered 
            resources, i.e. build is platform dependent! -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

        <!-- JBoss dependency versions -->
        
        <version.wildfly.maven.plugin>1.0.1.Final</version.wildfly.maven.plugin>
        
        <!-- Define the version of the JBoss BOMs we want to import to specify tested stacks. -->
        <version.jboss.bom>8.0.0.Final</version.jboss.bom>
        <version.arquillian.container>8.0.0.Final</version.arquillian.container>

        <!-- Other dependency versions -->
        <version.javax.servlet.jstl>1.2</version.javax.servlet.jstl>

        <!-- other plugin versions -->
        <version.compiler.plugin>2.3.1</version.compiler.plugin>
        <version.surefire.plugin>2.4.3</version.surefire.plugin>
        <version.war.plugin>2.1.1</version.war.plugin>

        <!-- maven-compiler-plugin -->
        <maven.compiler.target>1.6</maven.compiler.target>
        <maven.compiler.source>1.6</maven.compiler.source>
        
            <drools.version>6.0.1.Final</drools.version>
    	<jbpm.version>6.0.1.Final</jbpm.version>	
    	<slf4j.version>1.6.4</slf4j.version>
    	<version.picketlink.javaee.bom>2.7.0.Final</version.picketlink.javaee.bom>
    	<myfaces.version>2.2.3-SNAPSHOT</myfaces.version>
    	<deltaspike.version>0.6</deltaspike.version>
    <owb.version>1.2.0</owb.version>
    <weld.version>1.1.9.Final</weld.version>    
    	 <version.metadata-extractor>2.6.2</version.metadata-extractor>
        <version.jackson>1.9.12</version.jackson>
    	<!-- JBoss AS dependency versions -->
<version.jboss.maven.plugin>7.4.Final</version.jboss.maven.plugin>
        <org.ocpsoft.rewrite.version>2.0.12.Final</org.ocpsoft.rewrite.version>

    </properties>

    <dependencyManagement>
        <dependencies>
            <!-- JBoss distributes a complete set of Java EE 7 APIs including
                a Bill of Materials (BOM). A BOM specifies the versions of a "stack" (or 
                a collection) of artifacts. We use this here so that we always get the correct 
                versions of artifacts. Here we use the jboss-javaee-7.0-with tools stack
                (you can read this as the JBoss stack of the Java EE 7 APIs, with some extras
                tools for your project, such as Arquillian for testing) and the jboss-javaee-7.0-with-hibernate
                stack (which adds in the Hibernate family of projects). -->
            <dependency>
                <groupId>org.wildfly.bom</groupId>
                <artifactId>jboss-javaee-7.0-with-tools</artifactId>
                <version>${version.jboss.bom}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            
            <dependency>
                <groupId>org.wildfly.bom</groupId>
                <artifactId>jboss-javaee-7.0-with-hibernate</artifactId>
                <version>${version.jboss.bom}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
             <!-- Similarly to the JBoss Java EE 6 BOM above, the RichFaces BOM specifies the
  			versions of artifacts required for using RichFaces in your project. 
  			        <dependency>
                <groupId>org.richfaces</groupId>
                <artifactId>richfaces-bom</artifactId>
                <version>4.3.8-SNAPSHOT</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>            --> 

			

             <dependency>
                <groupId>org.richfaces</groupId>
                <artifactId>richfaces-build</artifactId>
                <version>4.5.12.Final</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
			<dependency>
		        <groupId>org.drools</groupId>
		        <artifactId>drools-bom</artifactId>
		        <type>pom</type>
		        <version>${drools.version}</version>
		        <scope>import</scope>
		      </dependency>
		      <dependency>
		        <groupId>org.jbpm</groupId>
		        <artifactId>jbpm-bom</artifactId>
		        <type>pom</type>
		        <version>${jbpm.version}</version>
		        <scope>import</scope>
		      </dependency>
		      <dependency>
		      
					<groupId>org.picketlink</groupId>
					<artifactId>picketlink-javaee-7.0</artifactId>
					<type>pom</type>
					<scope>import</scope>
					<version>${version.picketlink.javaee.bom}</version>
				</dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>

        <!-- First declare the APIs we depend on and need for compilation. 
            All of them are provided by JBoss WildFly -->

        <!-- Import the CDI API, we use provided scope as the API is included in JBoss WildFly -->
        <dependency>
            <groupId>javax.enterprise</groupId>
            <artifactId>cdi-api</artifactId>
            <scope>provided</scope>
        </dependency>

        <!-- Import the Common Annotations API (JSR-250), we use provided 
            scope as the API is included in JBoss WildFly -->
        <dependency>
            <groupId>org.jboss.spec.javax.annotation</groupId>
            <artifactId>jboss-annotations-api_1.2_spec</artifactId>
            <scope>provided</scope>
        </dependency>

        <!-- Import the Servlet API, we use provided scope as the API is 
            included in JBoss WildFly -->
        <dependency>
            <groupId>org.jboss.spec.javax.servlet</groupId>
            <artifactId>jboss-servlet-api_3.1_spec</artifactId>
            <scope>provided</scope>
        </dependency>
         <!-- Import the JSF API, we use provided scope as the API is included 
            in JBoss AS 7 -->
        <dependency>
            <groupId>org.jboss.spec.javax.faces</groupId>
            <artifactId>jboss-jsf-api_2.2_spec</artifactId>
            <version>2.2.12</version>
            <scope>provided</scope>
        </dependency>

        <!-- Import the JAX-RS API, we use provided scope as the API is included in JBoss WildFly -->
        <dependency>
            <groupId>org.jboss.resteasy</groupId>
            <artifactId>jaxrs-api</artifactId>
            <scope>provided</scope>
        </dependency>

        <!-- Import the JPA API, we use provided scope as the API is included in JBoss WildFly -->
        <dependency>
            <groupId>org.hibernate.javax.persistence</groupId>
            <artifactId>hibernate-jpa-2.1-api</artifactId>
            <scope>provided</scope>
        </dependency>

        <!-- Import the EJB API, we use provided scope as the API is included in JBoss WildFly -->
        <dependency>
            <groupId>org.jboss.spec.javax.ejb</groupId>
            <artifactId>jboss-ejb-api_3.2_spec</artifactId>
            <scope>provided</scope>
        </dependency>

        <!-- JSTL 1.2 or +
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>${version.javax.servlet.jstl}</version>
            <scope>runtime</scope>
        </dependency> -->

        <!-- JSR-303 (Bean Validation) Implementation -->
        <!-- Provides portable constraints such as @Email -->
        <!-- Hibernate Validator is shipped in JBoss WildFly -->
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-validator</artifactId>
            <scope>provided</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.slf4j</groupId>
                    <artifactId>slf4j-api</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- Now we declare any tools needed -->

        <!-- Annotation processor to generate the JPA 2.0 metamodel classes 
            for typesafe criteria queries -->
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-jpamodelgen</artifactId>
            <scope>provided</scope>
        </dependency>
        
        <!-- Annotation processor that raising compilation errors whenever 
            constraint annotations are incorrectly used. -->
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-validator-annotation-processor</artifactId>
            <scope>provided</scope>
        </dependency>
                
         <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-core</artifactId>
            <scope>provided</scope>
        </dependency>

        <!-- Needed for running tests (you may also use TestNG) -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- Optional, but highly recommended -->
        <!-- Arquillian allows you to test enterprise code such as EJBs and 
            Transactional(JTA) JPA from JUnit/TestNG -->
        <dependency>
            <groupId>org.jboss.arquillian.junit</groupId>
            <artifactId>arquillian-junit-container</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.jboss.arquillian.protocol</groupId>
            <artifactId>arquillian-protocol-servlet</artifactId>
            <scope>test</scope>
        </dependency>
         
        <!-- Import the RichFaces core library
      <dependency>
         <groupId>org.richfaces.core</groupId>
         <artifactId>richfaces-core-impl</artifactId>         
      </dependency>-->
      <!-- Import the RichFaces components          
      <dependency>
         <groupId>org.richfaces.ui</groupId>
         <artifactId>richfaces-components-ui</artifactId>
      </dependency> 
        

      <dependency>
         <groupId>org.atmosphere</groupId>
         <artifactId>atmosphere-runtime</artifactId>
         <exclusions>
             <exclusion>
                 <groupId>org.slf4j</groupId>
                 <artifactId>slf4j-api</artifactId>
             </exclusion>
         </exclusions>
      </dependency>
        -->
        
        
      <dependency>
            <groupId>org.richfaces</groupId>
            <artifactId>richfaces</artifactId>
        </dependency>
	    <dependency>
	      <groupId>org.slf4j</groupId>
	      <artifactId>slf4j-api</artifactId>
	      <version>${slf4j.version}</version>
	    </dependency>
	    <dependency>
	      <groupId>dom4j</groupId>
	      <artifactId>dom4j</artifactId>
	      <version>1.6.1</version>
	      <scope>provided</scope>
	    </dependency>
		 <!-- Import the PicketLink API, we deploy this as library with the application,
		and can compile against it -->
		<dependency>
		<groupId>org.picketlink</groupId>
		<artifactId>picketlink-api</artifactId>
		</dependency>
		<!-- Import the PicketLink implementation, we deploy this as library with the application,
		but can't compile against it -->
		<dependency>
		<groupId>org.picketlink</groupId>
		<artifactId>picketlink-impl</artifactId>
		<scope>runtime</scope>
		</dependency>
		<!-- Import the PicketLink IDM API, we deploy this as library with the application,
		and can compile against it -->
		<dependency>
		<groupId>org.picketlink</groupId>
		<artifactId>picketlink-idm-api</artifactId>
		</dependency>
		
		
		<!-- Import the PicketLink IDM API, we deploy this as library with the application,
		and can compile against it -->
		<dependency>
		<groupId>org.picketlink</groupId>
		<artifactId>picketlink-idm-impl</artifactId>
		<scope>runtime</scope>
		</dependency>
		
		 <dependency>
		<groupId>org.picketlink</groupId>
		<artifactId>picketlink-idm-simple-schema</artifactId>
		<scope>compile</scope>
		</dependency>
		 <dependency>
		    <groupId>org.picketlink</groupId>
		    <artifactId>picketlink-deltaspike</artifactId>
		  </dependency>
		
<!-- Deltaspike API. We use compile scope as we need compile against its API -->
    <dependency>
      <groupId>org.apache.deltaspike.core</groupId>
      <artifactId>deltaspike-core-api</artifactId>
      <scope>compile</scope>
    </dependency>
    

    <!-- Deltaspike Impl. we use runtime scope as we need its implementation
        dependencies only on runtime -->
    <dependency>
      <groupId>org.apache.deltaspike.core</groupId>
      <artifactId>deltaspike-core-impl</artifactId>
      <scope>runtime</scope>
    </dependency>

    <!-- Deltaspike Security Module API. We use compile scope as we need
        to compile against its API -->
    <dependency>
      <groupId>org.apache.deltaspike.modules</groupId>
      <artifactId>deltaspike-security-module-api</artifactId>
      <scope>compile</scope>
    </dependency>

    <!-- Deltaspike Security Impl. we use runtime scope as we need its implementation
        dependencies only on runtime -->
    <dependency>
      <groupId>org.apache.deltaspike.modules</groupId>
      <artifactId>deltaspike-security-module-impl</artifactId>
      <scope>runtime</scope>
    </dependency>
    <!-- The rewrite library allows us to do url rewriting - used here for rewriting mobile devices to mobile specific views -->
        <dependency>
            <groupId>org.ocpsoft.rewrite</groupId>
            <artifactId>rewrite-servlet</artifactId>
            <version>${org.ocpsoft.rewrite.version}</version>
        </dependency>
        <!-- The cdi integration allows for CDI injection into the rewrite configuration class -->
        <dependency>
            <groupId>org.ocpsoft.rewrite</groupId>
            <artifactId>rewrite-integration-cdi</artifactId>
            <version>${org.ocpsoft.rewrite.version}</version>
        </dependency>

        <!-- Annotation processor that raising compilation errors whenever
            constraint annotations are incorrectly used. -->
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-validator-annotation-processor</artifactId>
            <scope>provided</scope>
        </dependency>


  
        
<dependency>
  <groupId>dom4j</groupId> 
  <artifactId>dom4j</artifactId> 
  <version>1.6.1</version> 
  <scope>provided</scope> 
  </dependency>
    <dependency>
        <groupId>com.sun.faces</groupId>
        <artifactId>jsf-api</artifactId>
        <version>2.2.13</version><!--$NO-MVN-MAN-VER$-->
        <scope>provided</scope> 
    </dependency>
    
    <dependency>
        <groupId>com.sun.faces</groupId>
        <artifactId>jsf-impl</artifactId>
        <version>2.2.13</version><!--$NO-MVN-MAN-VER$-->
        <scope>provided</scope> 
    </dependency>
        
    <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>1.2</version>
             <scope>compiled</scope> 
        </dependency>
    


<dependency>
    <groupId>io.undertow</groupId>
    <artifactId>undertow-core</artifactId>
    <version>1.2.0.Beta4</version>
</dependency>

<dependency>
    <groupId>io.undertow</groupId>
    <artifactId>undertow-servlet</artifactId>
    <version>1.2.0.Beta4</version>
</dependency>

<dependency>
    <groupId>io.undertow</groupId>
    <artifactId>undertow-websockets-jsr</artifactId>
    <version>1.2.0.Beta4</version>
</dependency>

<dependency>
  <groupId>com.jcraft</groupId>
  <artifactId>jsch</artifactId>
  <version>0.1.53</version>
</dependency>

<dependency>
  <!-- jsoup HTML parser library @ http://jsoup.org/ -->
  <groupId>org.jsoup</groupId>
  <artifactId>jsoup</artifactId>
  <version>1.8.3</version>
</dependency>

    
  <!--   <dependency>
	      <groupId>org.jbpm</groupId>
	      <artifactId>jbpm-flow</artifactId>
	    </dependency>
	    <dependency>
	      <groupId>org.jbpm</groupId>
	      <artifactId>jbpm-flow-builder</artifactId>
	    </dependency>
	    <dependency>
	      <groupId>org.jbpm</groupId>
	      <artifactId>jbpm-bpmn2</artifactId>
	    </dependency>
	    <dependency>
	      <groupId>org.jbpm</groupId>
	      <artifactId>jbpm-persistence-jpa</artifactId>
	    </dependency>
	    <dependency>
	      <groupId>org.jbpm</groupId>
	      <artifactId>jbpm-human-task-core</artifactId>
	    </dependency>
	    <dependency>
	      <groupId>org.jbpm</groupId>
	      <artifactId>jbpm-runtime-manager</artifactId>
	    </dependency>
	    <dependency>
	      <groupId>org.jbpm</groupId>
	      <artifactId>jbpm-shared-services</artifactId>
	    </dependency>-->
 <dependency>
            <groupId>com.drewnoakes</groupId>
            <artifactId>metadata-extractor</artifactId>
            <version>${version.metadata-extractor}</version>
        </dependency>
        <dependency>
            <groupId>org.codehaus.jackson</groupId>
            <artifactId>jackson-jaxrs</artifactId>
            <version>${version.jackson}</version>
        </dependency>
      
    </dependencies>

    <build>
        <!-- Set the name of the war, used as the context root when the app 
            is deployed -->
        <finalName>${project.artifactId}</finalName>
        <plugins>
            <plugin>
                <artifactId>maven-war-plugin</artifactId>
                <version>${version.war.plugin}</version>
                <configuration>
                    <!-- Java EE 7 doesn't require web.xml, Maven needs to catch up! -->
                    <failOnMissingWebXml>true</failOnMissingWebXml>
                </configuration>
            </plugin>
             <!-- JBoss AS plugin to deploy war -->
			<plugin>
			<groupId>org.jboss.as.plugins</groupId>
			<artifactId>jboss-as-maven-plugin</artifactId>
			<version>${version.jboss.maven.plugin}</version>
			</plugin>
            <!-- WildFly plugin to deploy war -->
            <plugin>
                <groupId>org.wildfly.plugins</groupId>
                <artifactId>wildfly-maven-plugin</artifactId>
                <version>${version.wildfly.maven.plugin}</version>
            </plugin>
            <!-- Compiler plugin enforces Java 1.6 compatibility and activates 
                annotation processors -->
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${version.compiler.plugin}</version>
                <configuration>
                    <source>${maven.compiler.source}</source>
                    <target>${maven.compiler.target}</target>
                </configuration>
            </plugin>
          		<!-- The JBoss AS plugin deploys your war to a local JBoss AS container -->
			<!-- To use, run: mvn package jboss-as:deploy -->
            <plugin>
                <groupId>org.jboss.as.plugins</groupId>
                <artifactId>jboss-as-maven-plugin</artifactId>
            </plugin>
            

        </plugins>
    </build>



    <profiles>
     <profile>
            <id>release</id>
            <properties>
                <javax.faces.PROJECT_STAGE>Production</javax.faces.PROJECT_STAGE>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-assembly-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>group-sources</id>
                                <goals>
                                    <goal>single</goal>
                                </goals>
                                <phase>package</phase>
                                <configuration>
                                    <finalName>sources</finalName>
                                    <appendAssemblyId>false</appendAssemblyId>
                                    <descriptor>assembler.xml
                                    </descriptor>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <artifactId>maven-jar-plugin</artifactId>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>jar</goal>
                                </goals>
                                <phase>package</phase>
                                <configuration>
                                    <classesDirectory>${basedir}/target/sources/sources
                                    </classesDirectory>
                                    <classifier>sources</classifier>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

    
    <profile>
            <id>myfaces</id>
            <activation>
                <activeByDefault>false</activeByDefault>
            </activation>
            <dependencies>
                <dependency>
                    <groupId>org.apache.myfaces.core</groupId>
                    <artifactId>myfaces-api</artifactId>
                    <version>${myfaces.version}</version>
                    <scope>compile</scope>
                </dependency>
                <dependency>
                    <groupId>org.apache.myfaces.core</groupId>
                    <artifactId>myfaces-impl</artifactId>
                    <version>${myfaces.version}</version><!--$NO-MVN-MAN-VER$-->
                    <scope>compile</scope>
                </dependency>
            </dependencies>
            <repositories>
                <repository>
                    <id>apache.snapshots</id>
                    <name>Apache Snapshot Repository</name>
                    <url>http://repository.apache.org/snapshots</url>
                    <releases>
                        <enabled>false</enabled>
                    </releases>
                </repository>
            </repositories>
            <properties>
                <override-web-xml>src/main/jetty/override-myfaces-web.xml</override-web-xml>
            </properties>
        </profile>
        <profile>
            <!-- The default profile skips all tests, though you can tune 
                it to run just unit tests based on a custom pattern -->
            <!-- Seperate profiles are provided for running all tests, including 
                Arquillian tests that execute in the specified container -->
            <id>default</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <version>${version.surefire.plugin}</version>
                        <configuration>
                            <skip>true</skip>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>

            <!-- An optional Arquillian testing profile that executes tests
                in your WildFly instance -->
            <!-- This profile will start a new WildFly instance, and execute the
                test, shutting it down when done -->
            <!-- Run with: mvn clean test -Parq-wildfly-managed -->
            <id>arq-wildfly-managed</id>
            <dependencies>
                <dependency>
                    <groupId>org.wildfly</groupId>
                    <artifactId>wildfly-arquillian-container-managed</artifactId>
                    <version>${version.arquillian.container}</version><!--$NO-MVN-MAN-VER$-->
                    <scope>test</scope>
                </dependency>
            </dependencies>
        </profile>

        <profile>
            <!-- An optional Arquillian testing profile that executes tests
                in a remote WildFly instance -->
            <!-- Run with: mvn clean test -Parq-wildfly-remote -->
            <id>arq-wildfly-remote</id>
            <dependencies>
                <dependency>
                    <groupId>org.wildfly</groupId>
                    <artifactId>wildfly-arquillian-container-remote</artifactId>
                    <version>${version.arquillian.container}</version><!--$NO-MVN-MAN-VER$-->
                    <scope>test</scope>
                </dependency>
            </dependencies>
        </profile>

        <profile>
            <!-- When built in OpenShift the 'openshift' profile will be 
                used when invoking mvn. -->
            <!-- Use this profile for any OpenShift specific customization 
                your app will need. -->
            <!-- By default that is to put the resulting archive into the 
                'deployments' folder. -->
            <!-- http://maven.apache.org/guides/mini/guide-building-for-different-environments.html -->
            <id>openshift</id>
            <build>
                <plugins>
                    <plugin>
                        <artifactId>maven-war-plugin</artifactId>
                        <version>${version.war.plugin}</version>
                        <configuration>
                            <outputDirectory>deployments</outputDirectory>
                            <warName>ROOT</warName>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
        <repositories>
         <repository>
                    <id>apache.snapshots</id>
                    <name>Apache Snapshot Repository</name>
                    <url>http://repository.apache.org/snapshots</url>
                    <releases>
                        <enabled>false</enabled>
                    </releases>
                </repository>
    <repository>
      <id>jboss-public-repository-group</id>
      <name>JBoss Public Repository Group</name>
      <url>https://repository.jboss.org/nexus/content/groups/public-jboss/</url>
      <releases>
        <enabled>true</enabled>
        <updatePolicy>never</updatePolicy>
      </releases>
      <snapshots>
        <enabled>true</enabled>
        <updatePolicy>daily</updatePolicy>
      </snapshots>
    </repository>
    
  </repositories>
</project>



